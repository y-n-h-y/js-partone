* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
/* 
css設計手法について
answer:BEM,OOCSS,SMASS,MCSS,FLOCSS
■BEM
Block(大枠となる独立した要素)Element(Blockを構成する要素)Modifier(基本のスタイルから派生させる場合に追加)
・スタイルの使いまわしが少なく class名で範囲が絞られるため、メンテナンス性が良い
・class名が冗長になり、巨大なサイトだと命名する際に意外なほど疲れる…
・同じスタイル記述(marginとかfont-sizeとかpositionとか…)を何度も書く羽目になる…
・固有(ユニーク)レイアウトが多いデザインだったりすると、とてつもない量の css を書く羽目になる…
　　　アンダーバー2つ　ハイフン2つ
<div class="Block">
    <div class="Block__element">
        <div class="Block__element--modifier"></div>
    </div>
</div>
.Block {
    &__element {
        &--modifier {
        }
    }
}

■OOCSS
Object Oriented CSS(オブジェクト指向
<ul>
  <li class="label label-news">NEWS</li>
  <li class="label label-pickup">PICKUP</li>
  <li class="label label-info">INFO</li>
</ul>
.label {
  margin-right:.5em;
  padding:.2em 1em;
  display:inline-block;
  &-news{
    background-color:yellow;
  }
  &-pickup{
    background-color:pink;
  }
  &-info{
    background-color:#73d1fa;
  }
}

■SMACSS
Scalable and Modular Architecture for CSS
・構造・カテゴリを分類化することで記述コード量を少なくする
・メンテナンス性もある程度担保できる
・作業者全員にルール共有をしておかないと、カオスになりうる
基本的な考え方は OOCSS と同じで、オブジェクト指向な記述方法です。
おおまかに下記のように5つに分類・細分化して記述していきます。
・ベース(base.css)：要素そのもののデフォルトスタイルを定義
　要素セレクタ・属性セレクタ・擬似クラスセレクタなどのスタイリングを指定します(ID・classなどは指定しません)
・レイアウト(layout.css)：画面をエリアごとに分割するためのスタイルを定義
　『l-』や『layout-』などの接頭辞を付けてレイアウト要素を指定します
・モジュール(module.css)：再利用可能な単位でパーツの見た目を定義
　再利用可能な粒度で、各パーツを具体的に指定します
・状態(state.css)：レイアウトやモジュールの特定の状態におけるスタイルを定義
　特定状態によってスタイルを指定します(jsなどで動的処理場合は『is-』接頭辞を付けたりします)
・テーマ(theme.css)：サイトのトンマナ(統一性)を定義
　サイト全体の見た目や、雰囲気を統一させるためのスタイルを指定します

■FLOCSS
FLOCSS は、Foundation Layout Object css の略語で、BEM・OOCSS・SMACSS・SuitCSS・MCSS などの考え方を取り入れた設計手法で、基本的な命名規則は MindBEMding を採用し、【Foundation・Layout・Object】の3つのレイヤーで構成します。
・Foundation：サイト全体のデフォルトスタイルを定義
　※reset や mixin などの大元に関わるスタイル
・Layout：各ページを構成するサイト全体で共通したエリアを定義
　※header・footer・メインカラム などの共通レイアウトに関わるスタイル
・Object：サイト全体で再利用できるパターンを持つモジュールを定義
　※画面を問わず様々な場所・場面に関わるスタイル

・ディレクトリ・ファイル構成をルール化することにより、改修時に修正するファイルが分かりやすい
・ファイルをルールに則って細分化することにより、css自体の可読性が良くなる
・微妙なパターンも多々あり、分類すること自体に悩むことがある…
・class名が冗長になり、巨大なサイトだと命名する際に意外なほど疲れる…

<a class="c-btnLayout c-btnLayout_red u-ma3" href="#">Button</a>
.c-btnLayout {
    padding:.25em 1em;
    text-align:center;
    display:inline-block;
    border:1px solid #333;
    border-radius:.25em;
    &_red {
        color:#fff;
        background:#c00;
    }
}

■MCSS
MCSSはCSSの設計手法の一つで、モジュールをレイヤー毎に分離させているのが特徴です。
以下の5つのレイヤー構成に分離させます。
・Foundation
・Base
・Project
・Cosmetic
・Context

■なぜcssの設計手法が存在するのか？
よいCSS設計が目指す4つのゴール
・予測できる
　「予測できる」とは即ち、「スタイリングが期待通りに振る舞うかどうか」「スタイリングの影響範囲が予測できるか」　を意味しています。新しいスタイリングを追加する、または既存のスタイリングを更新しても、自分の意図しない箇所に　影響を与えないよう設計されているべきです。 
・再利用できる
　コードをいちいち書き直したり上書きする手間がない状態が「再利用できる」状態です。そのために、スタイリングはき　ちんと抽象化されており、また適切に分離されている必要があります 
・保守できる
　新しいモジュールや機能を追加・更新、あるいは配置換えしたとき、既存のCSSをリファクタリングする必要がない状態が　「保守できる」
・拡張できる
　「拡張できる」CSSとは、CSSに携わる人が1人であっても複数からなるチームであっても、問題なく管理できる状態を指し　ます。そのためにはCSS設計の規則はわかりやすく、学習コストが極端に高くない状態である必要があります。 

answer:
■大規模サイトなど複数人で作業するの品質向上
複数人でコーディングの作業を行なっている場合、それぞれが自分のルールでクラス命名したり規則を決めてしまうと、複数の箇所に同じような記述が出てしまうことや他の人が作業するときに構造を理解するのに時間がかかり、ミスにつながる可能性があるため、設計ルールを統一しコードを整理することで迷うことなくスムーズに取り組める。

■メンテナンス性の向上と効率化
メンテナンス性を考慮しない状態で記述をしてしまうと、更新作業や修正作業が発生した場合に広範囲の記述を修正しなければならないことや、他の部分に影響が出る可能性があるためメンテナンスのしやすさを考慮することで、記述の手間を軽減し作業効率が向上する。

CSSの良い設計である4つの指標として「予測できる」「再利用できる」「保守できる」「拡張できる」が挙げられ、この4つを意識して設計手法やチームでの共通化ルールを考えることでチームでの作業が品質と生産性が向上する。
 */